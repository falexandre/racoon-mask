(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define('@uncannyminds/racoon-mask-base', ['exports'], factory) :
    (factory((global.uncannyminds = global.uncannyminds || {}, global.uncannyminds['racoon-mask-base'] = {})));
}(this, (function (exports) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MaskingBase = /** @class */ (function () {
        function MaskingBase() {
            this._slotChar = "_";
            this._showPlaceholder = false;
            this._mask = "";
        }
        /**
         * @private
         * @param {?} s
         * @return {?}
         */
        MaskingBase.isNumeric = /**
         * @private
         * @param {?} s
         * @return {?}
         */
            function (s) {
                if (s === " ") {
                    return false;
                }
                return !isNaN(Number(s));
            };
        /**
         * @private
         * @param {?} s
         * @return {?}
         */
        MaskingBase.isAlpha = /**
         * @private
         * @param {?} s
         * @return {?}
         */
            function (s) {
                return s.match(/^[a-z]+$/i) !== null;
            };
        /**
         * @return {?}
         */
        MaskingBase.prototype.checkValue = /**
         * @return {?}
         */
            function () {
                this.oldValue = this.value;
                this.value = this._input.nativeElement.value;
                if (!this.value) {
                    return;
                }
                this.maskValue();
            };
        /**
         * @return {?}
         */
        MaskingBase.prototype.maskValue = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var maskedValue = "";
                /** @type {?} */
                var dif = 0;
                /** @type {?} */
                var foundPlaceholder = false;
                for (var i = 0; i < this._mask.length && this.value.length !== i; i++) {
                    /** @type {?} */
                    var maskChar = this._mask.charAt(i + dif);
                    /** @type {?} */
                    var valueChar = this.value.charAt(i);
                    if (this._showPlaceholder && valueChar === this._slotChar) {
                        if (foundPlaceholder) {
                            break;
                        }
                        foundPlaceholder = true;
                    }
                    if (!MaskingBase.isAlpha(valueChar)
                        && !MaskingBase.isNumeric(valueChar)
                        && valueChar !== maskChar) {
                        this.value = this.value.substring(0, i) + this.value.substring(i + 1);
                        i--;
                    }
                    else if (maskChar === "9") {
                        if (MaskingBase.isNumeric(valueChar)) {
                            maskedValue += valueChar;
                        }
                        else {
                            this.value = this.value.substring(0, i) + this.value.substring(i + 1);
                            i--;
                        }
                    }
                    else if (maskChar === "A") {
                        if (MaskingBase.isAlpha(this.value.charAt(i))) {
                            maskedValue += valueChar;
                        }
                        else {
                            this.value = this.value.substring(0, i) + this.value.substring(i + 1);
                            i--;
                        }
                    }
                    else if (maskChar !== valueChar && maskedValue.charAt(i + dif) !== maskChar) {
                        maskedValue += maskChar;
                        dif++;
                        i--;
                    }
                    else {
                        maskedValue += maskChar;
                    }
                }
                this.oldLength = maskedValue.length;
                if (this._showPlaceholder) {
                    maskedValue = this.fillWithPlaceholder(maskedValue);
                    this.oldValue = this.fillWithPlaceholder(this.oldValue);
                }
                this.caretPos = this.getUpdatedCaretPos(maskedValue);
                this.value = maskedValue;
                this.updateInput();
            };
        /**
         * @return {?}
         */
        MaskingBase.prototype.updateInput = /**
         * @return {?}
         */
            function () {
                this._input.nativeElement.value = this.value;
                this._input.nativeElement.selectionStart = this.caretPos;
                this._input.nativeElement.selectionEnd = this.caretPos;
            };
        /**
         * @private
         * @param {?} maskedValue
         * @return {?}
         */
        MaskingBase.prototype.getUpdatedCaretPos = /**
         * @private
         * @param {?} maskedValue
         * @return {?}
         */
            function (maskedValue) {
                /** @type {?} */
                var caretPos = this.getCaretPos();
                if (caretPos === this._input.nativeElement.value.length || caretPos === this.oldLength) {
                    caretPos = this.oldLength;
                }
                else if (this.oldValue !== maskedValue) {
                    while (caretPos < this.value.length &&
                        this._mask.charAt(caretPos) !== "9" &&
                        this._mask.charAt(caretPos) !== "A") {
                        caretPos++;
                    }
                }
                else {
                    caretPos--;
                }
                return caretPos;
            };
        /**
         * @private
         * @param {?} value
         * @return {?}
         */
        MaskingBase.prototype.fillWithPlaceholder = /**
         * @private
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (!value) {
                    return value;
                }
                /** @type {?} */
                var mask = this._mask.replace(/[9A]/g, this._slotChar);
                mask = mask.substring(value.length, mask.length);
                value = value + mask;
                return value;
            };
        /**
         * @return {?}
         */
        MaskingBase.prototype.getCaretPos = /**
         * @return {?}
         */
            function () {
                return this._input.nativeElement.selectionStart;
            };
        return MaskingBase;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.MaskingBase = MaskingBase;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=uncannyminds-racoon-mask-base.umd.js.map