{"version":3,"sources":["ng://@uncannyminds/racoon-mask-base/lib/masking-base/masking-base.ts"],"names":["MaskingBase","this","_slotChar","_showPlaceholder","_mask","isNumeric","s","isNaN","Number","isAlpha","match","prototype","checkValue","oldValue","value","_input","nativeElement","maskValue","maskedValue","dif","foundPlaceholder","i","length","maskChar","charAt","valueChar","substring","oldLength","fillWithPlaceholder","caretPos","getUpdatedCaretPos","updateInput","selectionStart","selectionEnd","getCaretPos","mask","replace"],"mappings":"wRAEA,IAAAA,EAAA,WAAA,SAAAA,IAGWC,KAAAC,UAAY,IAEZD,KAAAE,kBAAmB,EAEnBF,KAAAG,MAAQ,GAuHnB,OA7GmBJ,EAAAK,UAAf,SAAyBC,GACrB,MAAU,MAANA,IAGIC,MAAMC,OAAOF,KAGVN,EAAAS,QAAf,SAAuBH,GACnB,OAAgC,OAAzBA,EAAEI,MAAM,cAIZV,EAAAW,UAAAC,WAAP,WACIX,KAAKY,SAAWZ,KAAKa,MACrBb,KAAKa,MAAQb,KAAKc,OAAOC,cAAcF,MAClCb,KAAKa,OAGVb,KAAKgB,aAIFjB,EAAAW,UAAAM,UAAP,WAKI,QAJIC,EAAc,GACdC,EAAM,EACNC,GAAmB,EAEdC,EAAI,EAAGA,EAAIpB,KAAKG,MAAMkB,QAAUrB,KAAKa,MAAMQ,SAAWD,EAAGA,IAAK,KAC7DE,EAAWtB,KAAKG,MAAMoB,OAAOH,EAAIF,GACjCM,EAAYxB,KAAKa,MAAMU,OAAOH,GACpC,GAAIpB,KAAKE,kBAAoBsB,IAAcxB,KAAKC,UAAW,CACvD,GAAIkB,EACA,MAEJA,GAAmB,EAElBpB,EAAYS,QAAQgB,IACjBzB,EAAYK,UAAUoB,IACvBA,IAAcF,EAGG,MAAbA,EACHvB,EAAYK,UAAUoB,GACtBP,GAAeO,GAEfxB,KAAKa,MAAQb,KAAKa,MAAMY,UAAU,EAAGL,GAAKpB,KAAKa,MAAMY,UAAUL,EAAI,GACnEA,KAEgB,MAAbE,EACHvB,EAAYS,QAAQR,KAAKa,MAAMU,OAAOH,IACtCH,GAAeO,GAEfxB,KAAKa,MAAQb,KAAKa,MAAMY,UAAU,EAAGL,GAAKpB,KAAKa,MAAMY,UAAUL,EAAI,GACnEA,KAEGE,IAAaE,GAAaP,EAAYM,OAAOH,EAAIF,KAASI,GACjEL,GAAeK,EACfJ,IACAE,KAEAH,GAAeK,GArBftB,KAAKa,MAAQb,KAAKa,MAAMY,UAAU,EAAGL,GAAKpB,KAAKa,MAAMY,UAAUL,EAAI,GACnEA,KAuBRpB,KAAK0B,UAAYT,EAAYI,OACzBrB,KAAKE,mBACLe,EAAcjB,KAAK2B,oBAAoBV,GACvCjB,KAAKY,SAAWZ,KAAK2B,oBAAoB3B,KAAKY,WAGlDZ,KAAK4B,SAAW5B,KAAK6B,mBAAmBZ,GACxCjB,KAAKa,MAAQI,EACbjB,KAAK8B,eAGF/B,EAAAW,UAAAoB,YAAP,WACI9B,KAAKc,OAAOC,cAAcF,MAAQb,KAAKa,MACvCb,KAAKc,OAAOC,cAAcgB,eAAiB/B,KAAK4B,SAChD5B,KAAKc,OAAOC,cAAciB,aAAehC,KAAK4B,UAG1C7B,EAAAW,UAAAmB,mBAAR,SAA2BZ,OACnBW,EAAW5B,KAAKiC,cACpB,GAAIL,IAAa5B,KAAKc,OAAOC,cAAcF,MAAMQ,QAAUO,IAAa5B,KAAK0B,UACzEE,EAAW5B,KAAK0B,eACb,GAAI1B,KAAKY,WAAaK,EACzB,KAAOW,EAAW5B,KAAKa,MAAMQ,QACG,MAAhCrB,KAAKG,MAAMoB,OAAOK,IACc,MAAhC5B,KAAKG,MAAMoB,OAAOK,IACdA,SAGJA,IAEJ,OAAOA,GAGH7B,EAAAW,UAAAiB,oBAAR,SAA4Bd,GACxB,IAAKA,EACD,OAAOA,MAEPqB,EAAOlC,KAAKG,MAAMgC,QAAQ,QAASnC,KAAKC,WAG5C,OADAY,GADAqB,EAAOA,EAAKT,UAAUZ,EAAMQ,OAAQa,EAAKb,SAKtCtB,EAAAW,UAAAuB,YAAP,WACI,OAAOjC,KAAKc,OAAOC,cAAcgB,gBAEzChC,EA9HA","sourcesContent":["import { ElementRef } from \"@angular/core\";\r\n\r\nexport class MaskingBase {\r\n    private oldLength: number;\r\n\r\n    public _slotChar = \"_\";\r\n\r\n    public _showPlaceholder = false;\r\n\r\n    public _mask = \"\";\r\n\r\n    public _input: ElementRef;\r\n\r\n    private oldValue: string;\r\n\r\n    private caretPos: number;\r\n\r\n    public value: string;\r\n\r\n    private static isNumeric(s: string) {\r\n        if (s === \" \") {\r\n            return false;\r\n        }\r\n        return !isNaN(Number(s));\r\n    }\r\n\r\n    private static isAlpha(s: string) {\r\n        return s.match(/^[a-z]+$/i) !== null;\r\n    }\r\n\r\n\r\n    public checkValue() {\r\n        this.oldValue = this.value;\r\n        this.value = this._input.nativeElement.value;\r\n        if (!this.value) {\r\n            return;\r\n        }\r\n        this.maskValue();\r\n    }\r\n\r\n\r\n    public maskValue() {\r\n        let maskedValue = \"\";\r\n        let dif = 0;\r\n        let foundPlaceholder = false;\r\n\r\n        for (let i = 0; i < this._mask.length && this.value.length !== i; i++) {\r\n            const maskChar = this._mask.charAt(i + dif);\r\n            const valueChar = this.value.charAt(i);\r\n            if (this._showPlaceholder && valueChar === this._slotChar) {\r\n                if (foundPlaceholder) {\r\n                    break;\r\n                }\r\n                foundPlaceholder = true;\r\n            }\r\n            if (!MaskingBase.isAlpha(valueChar)\r\n                && !MaskingBase.isNumeric(valueChar)\r\n                && valueChar !== maskChar) {\r\n                this.value = this.value.substring(0, i) + this.value.substring(i + 1);\r\n                i--;\r\n            } else if (maskChar === \"9\") {\r\n                if (MaskingBase.isNumeric(valueChar)) {\r\n                    maskedValue += valueChar;\r\n                } else {\r\n                    this.value = this.value.substring(0, i) + this.value.substring(i + 1);\r\n                    i--;\r\n                }\r\n            } else if (maskChar === \"A\") {\r\n                if (MaskingBase.isAlpha(this.value.charAt(i))) {\r\n                    maskedValue += valueChar;\r\n                } else {\r\n                    this.value = this.value.substring(0, i) + this.value.substring(i + 1);\r\n                    i--;\r\n                }\r\n            } else if (maskChar !== valueChar && maskedValue.charAt(i + dif) !== maskChar) {\r\n                maskedValue += maskChar;\r\n                dif++;\r\n                i--;\r\n            } else {\r\n                maskedValue += maskChar;\r\n            }\r\n        }\r\n        this.oldLength = maskedValue.length;\r\n        if (this._showPlaceholder) {\r\n            maskedValue = this.fillWithPlaceholder(maskedValue);\r\n            this.oldValue = this.fillWithPlaceholder(this.oldValue);\r\n        }\r\n\r\n        this.caretPos = this.getUpdatedCaretPos(maskedValue);\r\n        this.value = maskedValue;\r\n        this.updateInput();\r\n    }\r\n\r\n    public updateInput() {\r\n        this._input.nativeElement.value = this.value;\r\n        this._input.nativeElement.selectionStart = this.caretPos;\r\n        this._input.nativeElement.selectionEnd = this.caretPos;\r\n    }\r\n\r\n    private getUpdatedCaretPos(maskedValue: string) {\r\n        let caretPos = this.getCaretPos();\r\n        if (caretPos === this._input.nativeElement.value.length || caretPos === this.oldLength) {\r\n            caretPos = this.oldLength;\r\n        } else if (this.oldValue !== maskedValue) {\r\n            while (caretPos < this.value.length &&\r\n            this._mask.charAt(caretPos) !== \"9\" &&\r\n            this._mask.charAt(caretPos) !== \"A\") {\r\n                caretPos++;\r\n            }\r\n        } else {\r\n            caretPos--;\r\n        }\r\n        return caretPos;\r\n    }\r\n\r\n    private fillWithPlaceholder(value: string): string {\r\n        if (!value) {\r\n            return value;\r\n        }\r\n        let mask = this._mask.replace(/[9A]/g, this._slotChar);\r\n        mask = mask.substring(value.length, mask.length);\r\n        value = value + mask;\r\n        return value;\r\n    }\r\n\r\n    public getCaretPos() {\r\n        return this._input.nativeElement.selectionStart;\r\n    }\r\n}\r\n"]}