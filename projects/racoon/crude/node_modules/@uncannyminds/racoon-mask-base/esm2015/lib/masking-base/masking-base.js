/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
export class MaskingBase {
    constructor() {
        this._slotChar = "_";
        this._showPlaceholder = false;
        this._mask = "";
    }
    /**
     * @private
     * @param {?} s
     * @return {?}
     */
    static isNumeric(s) {
        if (s === " ") {
            return false;
        }
        return !isNaN(Number(s));
    }
    /**
     * @private
     * @param {?} s
     * @return {?}
     */
    static isAlpha(s) {
        return s.match(/^[a-z]+$/i) !== null;
    }
    /**
     * @return {?}
     */
    checkValue() {
        this.oldValue = this.value;
        this.value = this._input.nativeElement.value;
        if (!this.value) {
            return;
        }
        this.maskValue();
    }
    /**
     * @return {?}
     */
    maskValue() {
        /** @type {?} */
        let maskedValue = "";
        /** @type {?} */
        let dif = 0;
        /** @type {?} */
        let foundPlaceholder = false;
        for (let i = 0; i < this._mask.length && this.value.length !== i; i++) {
            /** @type {?} */
            const maskChar = this._mask.charAt(i + dif);
            /** @type {?} */
            const valueChar = this.value.charAt(i);
            if (this._showPlaceholder && valueChar === this._slotChar) {
                if (foundPlaceholder) {
                    break;
                }
                foundPlaceholder = true;
            }
            if (!MaskingBase.isAlpha(valueChar)
                && !MaskingBase.isNumeric(valueChar)
                && valueChar !== maskChar) {
                this.value = this.value.substring(0, i) + this.value.substring(i + 1);
                i--;
            }
            else if (maskChar === "9") {
                if (MaskingBase.isNumeric(valueChar)) {
                    maskedValue += valueChar;
                }
                else {
                    this.value = this.value.substring(0, i) + this.value.substring(i + 1);
                    i--;
                }
            }
            else if (maskChar === "A") {
                if (MaskingBase.isAlpha(this.value.charAt(i))) {
                    maskedValue += valueChar;
                }
                else {
                    this.value = this.value.substring(0, i) + this.value.substring(i + 1);
                    i--;
                }
            }
            else if (maskChar !== valueChar && maskedValue.charAt(i + dif) !== maskChar) {
                maskedValue += maskChar;
                dif++;
                i--;
            }
            else {
                maskedValue += maskChar;
            }
        }
        this.oldLength = maskedValue.length;
        if (this._showPlaceholder) {
            maskedValue = this.fillWithPlaceholder(maskedValue);
            this.oldValue = this.fillWithPlaceholder(this.oldValue);
        }
        this.caretPos = this.getUpdatedCaretPos(maskedValue);
        this.value = maskedValue;
        this.updateInput();
    }
    /**
     * @return {?}
     */
    updateInput() {
        this._input.nativeElement.value = this.value;
        this._input.nativeElement.selectionStart = this.caretPos;
        this._input.nativeElement.selectionEnd = this.caretPos;
    }
    /**
     * @private
     * @param {?} maskedValue
     * @return {?}
     */
    getUpdatedCaretPos(maskedValue) {
        /** @type {?} */
        let caretPos = this.getCaretPos();
        if (caretPos === this._input.nativeElement.value.length || caretPos === this.oldLength) {
            caretPos = this.oldLength;
        }
        else if (this.oldValue !== maskedValue) {
            while (caretPos < this.value.length &&
                this._mask.charAt(caretPos) !== "9" &&
                this._mask.charAt(caretPos) !== "A") {
                caretPos++;
            }
        }
        else {
            caretPos--;
        }
        return caretPos;
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    fillWithPlaceholder(value) {
        if (!value) {
            return value;
        }
        /** @type {?} */
        let mask = this._mask.replace(/[9A]/g, this._slotChar);
        mask = mask.substring(value.length, mask.length);
        value = value + mask;
        return value;
    }
    /**
     * @return {?}
     */
    getCaretPos() {
        return this._input.nativeElement.selectionStart;
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    MaskingBase.prototype.oldLength;
    /** @type {?} */
    MaskingBase.prototype._slotChar;
    /** @type {?} */
    MaskingBase.prototype._showPlaceholder;
    /** @type {?} */
    MaskingBase.prototype._mask;
    /** @type {?} */
    MaskingBase.prototype._input;
    /**
     * @type {?}
     * @private
     */
    MaskingBase.prototype.oldValue;
    /**
     * @type {?}
     * @private
     */
    MaskingBase.prototype.caretPos;
    /** @type {?} */
    MaskingBase.prototype.value;
}
//# sourceMappingURL=data:application/json;base64,