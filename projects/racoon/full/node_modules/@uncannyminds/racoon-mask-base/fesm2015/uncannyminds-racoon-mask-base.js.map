{"version":3,"file":"uncannyminds-racoon-mask-base.js.map","sources":["ng://@uncannyminds/racoon-mask-base/lib/masking-base/masking-base.ts"],"sourcesContent":["import { ElementRef } from \"@angular/core\";\r\n\r\nexport class MaskingBase {\r\n    private oldLength: number;\r\n\r\n    public _slotChar = \"_\";\r\n\r\n    public _showPlaceholder = false;\r\n\r\n    public _mask = \"\";\r\n\r\n    public _input: ElementRef;\r\n\r\n    private oldValue: string;\r\n\r\n    private caretPos: number;\r\n\r\n    public value: string;\r\n\r\n    private static isNumeric(s: string) {\r\n        if (s === \" \") {\r\n            return false;\r\n        }\r\n        return !isNaN(Number(s));\r\n    }\r\n\r\n    private static isAlpha(s: string) {\r\n        return s.match(/^[a-z]+$/i) !== null;\r\n    }\r\n\r\n\r\n    public checkValue() {\r\n        this.oldValue = this.value;\r\n        this.value = this._input.nativeElement.value;\r\n        if (!this.value) {\r\n            return;\r\n        }\r\n        this.maskValue();\r\n    }\r\n\r\n\r\n    public maskValue() {\r\n        let maskedValue = \"\";\r\n        let dif = 0;\r\n        let foundPlaceholder = false;\r\n\r\n        for (let i = 0; i < this._mask.length && this.value.length !== i; i++) {\r\n            const maskChar = this._mask.charAt(i + dif);\r\n            const valueChar = this.value.charAt(i);\r\n            if (this._showPlaceholder && valueChar === this._slotChar) {\r\n                if (foundPlaceholder) {\r\n                    break;\r\n                }\r\n                foundPlaceholder = true;\r\n            }\r\n            if (!MaskingBase.isAlpha(valueChar)\r\n                && !MaskingBase.isNumeric(valueChar)\r\n                && valueChar !== maskChar) {\r\n                this.value = this.value.substring(0, i) + this.value.substring(i + 1);\r\n                i--;\r\n            } else if (maskChar === \"9\") {\r\n                if (MaskingBase.isNumeric(valueChar)) {\r\n                    maskedValue += valueChar;\r\n                } else {\r\n                    this.value = this.value.substring(0, i) + this.value.substring(i + 1);\r\n                    i--;\r\n                }\r\n            } else if (maskChar === \"A\") {\r\n                if (MaskingBase.isAlpha(this.value.charAt(i))) {\r\n                    maskedValue += valueChar;\r\n                } else {\r\n                    this.value = this.value.substring(0, i) + this.value.substring(i + 1);\r\n                    i--;\r\n                }\r\n            } else if (maskChar !== valueChar && maskedValue.charAt(i + dif) !== maskChar) {\r\n                maskedValue += maskChar;\r\n                dif++;\r\n                i--;\r\n            } else {\r\n                maskedValue += maskChar;\r\n            }\r\n        }\r\n        this.oldLength = maskedValue.length;\r\n        if (this._showPlaceholder) {\r\n            maskedValue = this.fillWithPlaceholder(maskedValue);\r\n            this.oldValue = this.fillWithPlaceholder(this.oldValue);\r\n        }\r\n\r\n        this.caretPos = this.getUpdatedCaretPos(maskedValue);\r\n        this.value = maskedValue;\r\n        this.updateInput();\r\n    }\r\n\r\n    public updateInput() {\r\n        this._input.nativeElement.value = this.value;\r\n        this._input.nativeElement.selectionStart = this.caretPos;\r\n        this._input.nativeElement.selectionEnd = this.caretPos;\r\n    }\r\n\r\n    private getUpdatedCaretPos(maskedValue: string) {\r\n        let caretPos = this.getCaretPos();\r\n        if (caretPos === this._input.nativeElement.value.length || caretPos === this.oldLength) {\r\n            caretPos = this.oldLength;\r\n        } else if (this.oldValue !== maskedValue) {\r\n            while (caretPos < this.value.length &&\r\n            this._mask.charAt(caretPos) !== \"9\" &&\r\n            this._mask.charAt(caretPos) !== \"A\") {\r\n                caretPos++;\r\n            }\r\n        } else {\r\n            caretPos--;\r\n        }\r\n        return caretPos;\r\n    }\r\n\r\n    private fillWithPlaceholder(value: string): string {\r\n        if (!value) {\r\n            return value;\r\n        }\r\n        let mask = this._mask.replace(/[9A]/g, this._slotChar);\r\n        mask = mask.substring(value.length, mask.length);\r\n        value = value + mask;\r\n        return value;\r\n    }\r\n\r\n    public getCaretPos() {\r\n        return this._input.nativeElement.selectionStart;\r\n    }\r\n}\r\n"],"names":[],"mappings":"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"}
